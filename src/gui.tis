var custom_gd_data = view.msgbox(#question, "Use custom Geometry Dash data folder?","GD data location",[ {id:#yes, text:"Select"}, {id:#no, text:"Use default"} ]);

var gd_data = view.get_default_gd_path();
if (custom_gd_data == "yes") {
    gd_data = view.format_selected_path(view.selectFolder());
}

for (var name in view.get_level_names(gd_data)) {
    $(#levellist).options.$append(<option>{name}</option>);
}

var stats = view.get_user_stats(gd_data);



$(#userinfo).$append(<h2>Logged in as {stats.username}</h2> );
$(#userinfo).$append(<p id="user_id_text">User ID: {stats.user_id} </p>);


for (var stat in stats.stats) {
    $(#stats).$append(<li class="stat">{stat.name}: {stat.value}</li>);
}



function msg(msg) {
    view.msgbox(msg);
}

$(button#import).on("click", function() {
    if (view.gd_found()) {
        view.msgbox("Close Geometry Dash before importing!");
        return();
    }
    var fn = view.selectFile(#open, "lvlshare level file | *.lvl" , "lvl" );

    if (fn) {
        view.import_file(gd_data, fn);
    }
});

$(button#export).on("click", function() {

    let name = $(#levellist).value;
    if (name == "* Select a level to export") {
        view.msgbox("Select a level to export from the list above");
        return();
    }

    var fn = view.selectFile(#save, "lvlshare level file | *.lvl" , "lvl", name + ".lvl" );

    if (fn) {
        view.export_level(gd_data, name, fn);
    }
});

function openTab(name) {
    // Declare all variables
    var i, tabcontent, tablinks;

    if (name != "tab0") {
        self.select("#" + name).style["border-top-left-radius"] = "10px";
    } else {
        self.select("#" + name).style["border-top-left-radius"] = "0px";
    }

    // Get all elements with class="tabcontent" and hide them
    tabcontent = self.selectAll(".tabcontent");
    for (i = 0; i < tabcontent.length; i++) {

        
        tabcontent[i].style["display"] = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = self.selectAll(".tablinks");

    
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].attributes.removeClass(["active"]);
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    var active_button = self.select("#" + name + "button");
    
    
    active_button.attributes.addClass("active")

    self.select("#" + name).style["display"] = "block";

}

/*
$(button#addpartfile).on("click", function() {

    var leveldata = {
        name: "test name",
        creator: "creatorName",
    };

    self.select("#partlist").$append(<div class="partdisplay">
        <t class="levelname"> {leveldata.name} </t>
        <t class="creatorname"> by {leveldata.creator} </t>
    </div>);
});
*/


self.select("#tab0button").on("click", function() {
    openTab("tab0")
});
self.select("#tab1button").on("click", function() {
    openTab("tab1")
});
/*
self.select("#tab2button").on("click", function() {
    openTab("tab2")
});
self.select("#tab3button").on("click", function() {
    openTab("tab3")
});
self.select("#tab4button").on("click", function() {
    openTab("tab4")
});
*/

openTab("tab0");
